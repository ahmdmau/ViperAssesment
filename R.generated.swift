//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 5 storyboards.
  struct storyboard {
    /// Storyboard `DetailPage`.
    static let detailPage = _R.storyboard.detailPage()
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `Profile`.
    static let profile = _R.storyboard.profile()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "DetailPage", bundle: ...)`
    static func detailPage(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.detailPage)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.home)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Profile", bundle: ...)`
    static func profile(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profile)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `ActivityIndicatorBackgroundColor`.
    static let activityIndicatorBackgroundColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "ActivityIndicatorBackgroundColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ActivityIndicatorBackgroundColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func activityIndicatorBackgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.activityIndicatorBackgroundColor, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 18 files.
  struct file {
    /// Resource file `Poppins-Black.ttf`.
    static let poppinsBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Black", pathExtension: "ttf")
    /// Resource file `Poppins-BlackItalic.ttf`.
    static let poppinsBlackItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-BlackItalic", pathExtension: "ttf")
    /// Resource file `Poppins-Bold.ttf`.
    static let poppinsBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Bold", pathExtension: "ttf")
    /// Resource file `Poppins-BoldItalic.ttf`.
    static let poppinsBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-BoldItalic", pathExtension: "ttf")
    /// Resource file `Poppins-ExtraBold.ttf`.
    static let poppinsExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-ExtraBold", pathExtension: "ttf")
    /// Resource file `Poppins-ExtraBoldItalic.ttf`.
    static let poppinsExtraBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-ExtraBoldItalic", pathExtension: "ttf")
    /// Resource file `Poppins-ExtraLight.ttf`.
    static let poppinsExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-ExtraLight", pathExtension: "ttf")
    /// Resource file `Poppins-ExtraLightItalic.ttf`.
    static let poppinsExtraLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-ExtraLightItalic", pathExtension: "ttf")
    /// Resource file `Poppins-Light.ttf`.
    static let poppinsLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Light", pathExtension: "ttf")
    /// Resource file `Poppins-LightItalic.ttf`.
    static let poppinsLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-LightItalic", pathExtension: "ttf")
    /// Resource file `Poppins-Medium.ttf`.
    static let poppinsMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Medium", pathExtension: "ttf")
    /// Resource file `Poppins-MediumItalic.ttf`.
    static let poppinsMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-MediumItalic", pathExtension: "ttf")
    /// Resource file `Poppins-Regular.ttf`.
    static let poppinsRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Regular", pathExtension: "ttf")
    /// Resource file `Poppins-RegularItalic.ttf`.
    static let poppinsRegularItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-RegularItalic", pathExtension: "ttf")
    /// Resource file `Poppins-SemiBold.ttf`.
    static let poppinsSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-SemiBold", pathExtension: "ttf")
    /// Resource file `Poppins-SemiBoldItalic.ttf`.
    static let poppinsSemiBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-SemiBoldItalic", pathExtension: "ttf")
    /// Resource file `Poppins-Thin.ttf`.
    static let poppinsThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Thin", pathExtension: "ttf")
    /// Resource file `Poppins-ThinItalic.ttf`.
    static let poppinsThinItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-ThinItalic", pathExtension: "ttf")

    /// `bundle.url(forResource: "Poppins-Black", withExtension: "ttf")`
    static func poppinsBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-BlackItalic", withExtension: "ttf")`
    static func poppinsBlackItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsBlackItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Bold", withExtension: "ttf")`
    static func poppinsBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-BoldItalic", withExtension: "ttf")`
    static func poppinsBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-ExtraBold", withExtension: "ttf")`
    static func poppinsExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-ExtraBoldItalic", withExtension: "ttf")`
    static func poppinsExtraBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsExtraBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-ExtraLight", withExtension: "ttf")`
    static func poppinsExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-ExtraLightItalic", withExtension: "ttf")`
    static func poppinsExtraLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsExtraLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Light", withExtension: "ttf")`
    static func poppinsLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-LightItalic", withExtension: "ttf")`
    static func poppinsLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Medium", withExtension: "ttf")`
    static func poppinsMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-MediumItalic", withExtension: "ttf")`
    static func poppinsMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Regular", withExtension: "ttf")`
    static func poppinsRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-RegularItalic", withExtension: "ttf")`
    static func poppinsRegularItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsRegularItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-SemiBold", withExtension: "ttf")`
    static func poppinsSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-SemiBoldItalic", withExtension: "ttf")`
    static func poppinsSemiBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsSemiBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Thin", withExtension: "ttf")`
    static func poppinsThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-ThinItalic", withExtension: "ttf")`
    static func poppinsThinItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsThinItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 18 fonts.
  struct font: Rswift.Validatable {
    /// Font `Poppins-BlackItalic`.
    static let poppinsBlackItalic = Rswift.FontResource(fontName: "Poppins-BlackItalic")
    /// Font `Poppins-Black`.
    static let poppinsBlack = Rswift.FontResource(fontName: "Poppins-Black")
    /// Font `Poppins-BoldItalic`.
    static let poppinsBoldItalic = Rswift.FontResource(fontName: "Poppins-BoldItalic")
    /// Font `Poppins-Bold`.
    static let poppinsBold = Rswift.FontResource(fontName: "Poppins-Bold")
    /// Font `Poppins-ExtraBoldItalic`.
    static let poppinsExtraBoldItalic = Rswift.FontResource(fontName: "Poppins-ExtraBoldItalic")
    /// Font `Poppins-ExtraBold`.
    static let poppinsExtraBold = Rswift.FontResource(fontName: "Poppins-ExtraBold")
    /// Font `Poppins-ExtraLightItalic`.
    static let poppinsExtraLightItalic = Rswift.FontResource(fontName: "Poppins-ExtraLightItalic")
    /// Font `Poppins-ExtraLight`.
    static let poppinsExtraLight = Rswift.FontResource(fontName: "Poppins-ExtraLight")
    /// Font `Poppins-Italic`.
    static let poppinsItalic = Rswift.FontResource(fontName: "Poppins-Italic")
    /// Font `Poppins-LightItalic`.
    static let poppinsLightItalic = Rswift.FontResource(fontName: "Poppins-LightItalic")
    /// Font `Poppins-Light`.
    static let poppinsLight = Rswift.FontResource(fontName: "Poppins-Light")
    /// Font `Poppins-MediumItalic`.
    static let poppinsMediumItalic = Rswift.FontResource(fontName: "Poppins-MediumItalic")
    /// Font `Poppins-Medium`.
    static let poppinsMedium = Rswift.FontResource(fontName: "Poppins-Medium")
    /// Font `Poppins-Regular`.
    static let poppinsRegular = Rswift.FontResource(fontName: "Poppins-Regular")
    /// Font `Poppins-SemiBoldItalic`.
    static let poppinsSemiBoldItalic = Rswift.FontResource(fontName: "Poppins-SemiBoldItalic")
    /// Font `Poppins-SemiBold`.
    static let poppinsSemiBold = Rswift.FontResource(fontName: "Poppins-SemiBold")
    /// Font `Poppins-ThinItalic`.
    static let poppinsThinItalic = Rswift.FontResource(fontName: "Poppins-ThinItalic")
    /// Font `Poppins-Thin`.
    static let poppinsThin = Rswift.FontResource(fontName: "Poppins-Thin")

    /// `UIFont(name: "Poppins-Black", size: ...)`
    static func poppinsBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsBlack, size: size)
    }

    /// `UIFont(name: "Poppins-BlackItalic", size: ...)`
    static func poppinsBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsBlackItalic, size: size)
    }

    /// `UIFont(name: "Poppins-Bold", size: ...)`
    static func poppinsBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsBold, size: size)
    }

    /// `UIFont(name: "Poppins-BoldItalic", size: ...)`
    static func poppinsBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsBoldItalic, size: size)
    }

    /// `UIFont(name: "Poppins-ExtraBold", size: ...)`
    static func poppinsExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsExtraBold, size: size)
    }

    /// `UIFont(name: "Poppins-ExtraBoldItalic", size: ...)`
    static func poppinsExtraBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsExtraBoldItalic, size: size)
    }

    /// `UIFont(name: "Poppins-ExtraLight", size: ...)`
    static func poppinsExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsExtraLight, size: size)
    }

    /// `UIFont(name: "Poppins-ExtraLightItalic", size: ...)`
    static func poppinsExtraLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsExtraLightItalic, size: size)
    }

    /// `UIFont(name: "Poppins-Italic", size: ...)`
    static func poppinsItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsItalic, size: size)
    }

    /// `UIFont(name: "Poppins-Light", size: ...)`
    static func poppinsLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsLight, size: size)
    }

    /// `UIFont(name: "Poppins-LightItalic", size: ...)`
    static func poppinsLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsLightItalic, size: size)
    }

    /// `UIFont(name: "Poppins-Medium", size: ...)`
    static func poppinsMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsMedium, size: size)
    }

    /// `UIFont(name: "Poppins-MediumItalic", size: ...)`
    static func poppinsMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsMediumItalic, size: size)
    }

    /// `UIFont(name: "Poppins-Regular", size: ...)`
    static func poppinsRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsRegular, size: size)
    }

    /// `UIFont(name: "Poppins-SemiBold", size: ...)`
    static func poppinsSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsSemiBold, size: size)
    }

    /// `UIFont(name: "Poppins-SemiBoldItalic", size: ...)`
    static func poppinsSemiBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsSemiBoldItalic, size: size)
    }

    /// `UIFont(name: "Poppins-Thin", size: ...)`
    static func poppinsThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsThin, size: size)
    }

    /// `UIFont(name: "Poppins-ThinItalic", size: ...)`
    static func poppinsThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsThinItalic, size: size)
    }

    static func validate() throws {
      if R.font.poppinsBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Black' could not be loaded, is 'Poppins-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-BlackItalic' could not be loaded, is 'Poppins-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Bold' could not be loaded, is 'Poppins-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-BoldItalic' could not be loaded, is 'Poppins-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ExtraBold' could not be loaded, is 'Poppins-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsExtraBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ExtraBoldItalic' could not be loaded, is 'Poppins-ExtraBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ExtraLight' could not be loaded, is 'Poppins-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsExtraLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ExtraLightItalic' could not be loaded, is 'Poppins-ExtraLightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Italic' could not be loaded, is 'Poppins-RegularItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Light' could not be loaded, is 'Poppins-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-LightItalic' could not be loaded, is 'Poppins-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Medium' could not be loaded, is 'Poppins-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-MediumItalic' could not be loaded, is 'Poppins-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Regular' could not be loaded, is 'Poppins-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-SemiBold' could not be loaded, is 'Poppins-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsSemiBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-SemiBoldItalic' could not be loaded, is 'Poppins-SemiBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Thin' could not be loaded, is 'Poppins-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ThinItalic' could not be loaded, is 'Poppins-ThinItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 6 images.
  struct image {
    /// Image `HomeIcon`.
    static let homeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "HomeIcon")
    /// Image `PersonIcon`.
    static let personIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "PersonIcon")
    /// Image `ic_person_colorized`.
    static let ic_person_colorized = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_person_colorized")
    /// Image `image_one`.
    static let image_one = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_one")
    /// Image `image_three`.
    static let image_three = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_three")
    /// Image `image_two`.
    static let image_two = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_two")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HomeIcon", bundle: ..., traitCollection: ...)`
    static func homeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PersonIcon", bundle: ..., traitCollection: ...)`
    static func personIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.personIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_person_colorized", bundle: ..., traitCollection: ...)`
    static func ic_person_colorized(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_person_colorized, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image_one", bundle: ..., traitCollection: ...)`
    static func image_one(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_one, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image_three", bundle: ..., traitCollection: ...)`
    static func image_three(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_three, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image_two", bundle: ..., traitCollection: ...)`
    static func image_two(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_two, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `ListImageCell`.
    static let listImageCell = _R.nib._ListImageCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ListImageCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.listImageCell) instead")
    static func listImageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.listImageCell)
    }
    #endif

    static func listImageCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ListImageCell? {
      return R.nib.listImageCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ListImageCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ListImageCell`.
    static let listImageCell: Rswift.ReuseIdentifier<ListImageCell> = Rswift.ReuseIdentifier(identifier: "ListImageCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 9 localization keys.
    struct localizable {
      /// Value: Email
      static let labelEmail = Rswift.StringResource(key: "Label:Email", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter with your Email
      static let textFieldEmailPlaceholder = Rswift.StringResource(key: "TextField:Email:Placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter with your Password
      static let textFieldPasswordPlaceholder = Rswift.StringResource(key: "TextField:Password:Placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Home
      static let homeTitle = Rswift.StringResource(key: "Home:Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Login
      static let buttonLogin = Rswift.StringResource(key: "Button:Login", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Logout
      static let buttonLogout = Rswift.StringResource(key: "Button:Logout", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Password
      static let labelPassword = Rswift.StringResource(key: "Label:Password", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Profile
      static let profileTitle = Rswift.StringResource(key: "Profile:Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ViperAssesment
      static let appName = Rswift.StringResource(key: "AppName", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Email
      static func labelEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Label:Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Label:Email"
        }

        return NSLocalizedString("Label:Email", bundle: bundle, comment: "")
      }

      /// Value: Enter with your Email
      static func textFieldEmailPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TextField:Email:Placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "TextField:Email:Placeholder"
        }

        return NSLocalizedString("TextField:Email:Placeholder", bundle: bundle, comment: "")
      }

      /// Value: Enter with your Password
      static func textFieldPasswordPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TextField:Password:Placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "TextField:Password:Placeholder"
        }

        return NSLocalizedString("TextField:Password:Placeholder", bundle: bundle, comment: "")
      }

      /// Value: Home
      static func homeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home:Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home:Title"
        }

        return NSLocalizedString("Home:Title", bundle: bundle, comment: "")
      }

      /// Value: Login
      static func buttonLogin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Button:Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Button:Login"
        }

        return NSLocalizedString("Button:Login", bundle: bundle, comment: "")
      }

      /// Value: Logout
      static func buttonLogout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Button:Logout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Button:Logout"
        }

        return NSLocalizedString("Button:Logout", bundle: bundle, comment: "")
      }

      /// Value: Password
      static func labelPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Label:Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Label:Password"
        }

        return NSLocalizedString("Label:Password", bundle: bundle, comment: "")
      }

      /// Value: Profile
      static func profileTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile:Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile:Title"
        }

        return NSLocalizedString("Profile:Title", bundle: bundle, comment: "")
      }

      /// Value: ViperAssesment
      static func appName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AppName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AppName"
        }

        return NSLocalizedString("AppName", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ListImageCell.validate()
    }

    struct _ListImageCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ListImageCell

      let bundle = R.hostingBundle
      let identifier = "ListImageCell"
      let name = "ListImageCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ListImageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ListImageCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "image_one", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image_one' is used in nib 'ListImageCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try detailPage.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try home.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try login.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try profile.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct detailPage: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let detailViewController = StoryboardViewControllerResource<DetailViewController>(identifier: "DetailViewController")
      let name = "DetailPage"

      func detailViewController(_: Void = ()) -> DetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: detailViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.detailPage().detailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'detailViewController' could not be loaded from storyboard 'DetailPage' as 'DetailViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct home: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let homeNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "HomeNavigationController")
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "HomeViewController")
      let name = "Home"

      func homeNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeNavigationController)
      }

      func homeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.home().homeNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeNavigationController' could not be loaded from storyboard 'Home' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.home().homeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Home' as 'HomeViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct login: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "Login"

      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.login().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Login' as 'LoginViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct profile: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Profile"
      let profileNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "ProfileNavigationController")
      let profileViewController = StoryboardViewControllerResource<ProfileViewController>(identifier: "ProfileViewController")

      func profileNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileNavigationController)
      }

      func profileViewController(_: Void = ()) -> ProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_person_colorized", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_person_colorized' is used in storyboard 'Profile', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.profile().profileNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileNavigationController' could not be loaded from storyboard 'Profile' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.profile().profileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileViewController' could not be loaded from storyboard 'Profile' as 'ProfileViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
